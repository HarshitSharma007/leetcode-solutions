//In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root "an" is followed by the successor word "other", we can form a new word "another".
//
//Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.
//
//Return the sentence after the replacement.
//
// 
//
//Example 1:
//
//Input: dictionary = ["cat","bat","rat"], sentence = "the cattle was rattled by the battery"
//Output: "the cat was rat by the bat"
//Example 2:
//
//Input: dictionary = ["a","b","c"], sentence = "aadsfasf absbs bbab cadsfafs"
//Output: "a a b c"
//Example 3:
//
//Input: dictionary = ["a", "aa", "aaa", "aaaa"], sentence = "a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa"
//Output: "a a a a a a a a bbb baba a"
//Example 4:
//
//Input: dictionary = ["catt","cat","bat","rat"], sentence = "the cattle was rattled by the battery"
//Output: "the cat was rat by the bat"
//Example 5:
//
//Input: dictionary = ["ac","ab"], sentence = "it is abnormal that this solution is accepted"
//Output: "it is ab that this solution is ac"
// 
//
//Constraints:
//
//1 <= dictionary.length <= 1000
//1 <= dictionary[i].length <= 100
//dictionary[i] consists of only lower-case letters.
//1 <= sentence.length <= 10^6
//sentence consists of only lower-case letters and spaces.
//The number of words in sentence is in the range [1, 1000]
//The length of each word in sentence is in the range [1, 1000]
//Each two consecutive words in sentence will be separated by exactly one space.
//sentence does not have leading or trailing spaces.




//my solution -----------------

class trie{
    public :
    int count;
    trie * next[26];
}
;

class Solution {
public:
      trie * root;
    
        trie * getnode(){
          trie * root1=new trie();
        for(int i=0;i<26;i++){
            root1->next[i]=NULL;
        }
        root1->count=0;
        return root1;
    }
     void insert(string key) {
        trie * temp=root;
        for(int i=0;i<key.size();i++){
            if(temp->next[key[i]-'a']==NULL){
                temp->next[key[i]-'a']=getnode();
            }
            temp=temp->next[key[i]-'a'];
        }
        temp->count=1;
    }
    string search(string key){
        string r="";
         trie * temp=root;
        for(int i=0;i<key.size();i++){
            r+=key[i];
            if(temp->next[key[i]-'a']==NULL){
               return key;
            }
          else   if(temp->next[key[i]-'a']->count==0)
            temp=temp->next[key[i]-'a'];
            else 
                break;
        }
        return r;
    }
    string replaceWords(vector<string>& dictionary, string sentence) {
        sentence+=" ";
          root=new trie();
        for(int i=0;i<26;i++){
           root->next[i]=NULL;
        }
      root->count=0;
        string res="";
        for(int i=0;i<dictionary.size();i++){
            insert(dictionary[i]);
        }
        string temp="";
        for(int i=0;i<sentence.size();i++){
            
            if(sentence[i]!=' ')
            temp+=sentence[i];
            else if(temp.size()!=0) {
                res+=search(temp);
                res+=" ";
                   temp=""; 
            }
            
        
        }
        
        return res.substr(0,res.size()-1);
    }
};
